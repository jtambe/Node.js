var events = require('events');
var eventEmitter = new events.EventEmitter();

// listener Alena
var Alena = function listner1() {
   console.log('Alena executed.');
}

// listener Jayesh
var Jayesh = function listner2() {
  console.log('Jayesh executed.');
}

// Bind the JayEvent event with the Alena function
// one can add function as a listener using addListener property
eventEmitter.addListener('JayEvent', Alena);

// Bind the JayEvent event with the Jayesh function
eventEmitter.on('JayEvent', Jayesh);  

//list property is used to find number of listeners for an event
//Thus one of the parameter provided is 'JayEvent'
var eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'JayEvent');
console.log(eventListeners + " Listner(s) listening to connection event");

// Fire the JayEvent event 
eventEmitter.emit('JayEvent');

// Remove the binding of Alena function from JayEvent
eventEmitter.removeListener('JayEvent', Alena);
console.log("Alena will not listen now.");

// Fire the connection event 
eventEmitter.emit('JayEvent');

eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'JayEvent');
console.log(eventListeners + " Listner(s) listening to connection event");

console.log("Program Ended.");


//Following is the output
/*
2 Listner(s) listening to connection event
Alena executed.
Jayesh executed.
Alena will not listen now.
Jayesh executed.
1 Listner(s) listening to connection event
Program Ended.
*/


// if the order of addListener is changed and made like following

// Bind the JayEvent event with the Jayesh function
eventEmitter.on('JayEvent', Jayesh);  

// Bind the JayEvent event with the Alena function
// one can add function as a listener using addListener property
eventEmitter.addListener('JayEvent', Alena);

// Then out put changes as follows. Jayesh function is executed first.
/*
2 Listner(s) listening to connection event
Jayesh executed.
Alena executed.
Alena will not listen now.
Jayesh executed.
1 Listner(s) listening to connection event
Program Ended.
*/
